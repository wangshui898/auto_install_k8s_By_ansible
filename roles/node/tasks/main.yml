---
- name: 创建K8S工作目录
  file:
    dest={{ k8s_dir }}/{{ item }}
    state=directory
  with_items:
    - bin
    - cfg
    - ssl/etcd
    - logs

- name: 创建临时目录
  file:
    dest={{ k8s_src_dir }}/{{ item }}
    state=directory
  with_items:
    - tmp
    - images

- name: 安装ipvsadm
  yum:
    name: "{{ item }}"
    state: present
  loop:
    - ipvsadm
    - ipset
    - conntrack-tools
  tags: config_ipvs

- name: 配置/etc/sysctl.conf
  lineinfile:
     dest:  /etc/sysctl.conf
     regexp: "net.ipv4.ip_forward="
     line: net.ipv4.ip_forward=1
  tags: config_ipvs


- name: 生效sysctl配置
  tags: config_ipvs
  shell: sysctl -p

- name: 加载ipvs模块-临时生效
  tags: config_ipvs
  shell: modprobe -- ip_vs && \
         modprobe -- ip_vs_rr && \
         modprobe -- ip_vs_wrr && \
         modprobe -- ip_vs_sh && \
         modprobe -- nf_conntrack_ipv4

- name: 查询模块
  tags: config_ipvs
  shell: lsmod|egrep "ip_vs|nf_conntrack"
  register: modes

- name: 查询结果
  tags: config_ipvs
  debug: msg={{ modes.stdout_lines }}

- name: 配置ipvs.modules
  tags: config_ipvs
  copy: src=ipvs.modules dest=/etc/sysconfig/modules/ipvs.modules

- name: 创建cni工作目录
  file:
    dest={{ item }}
    state=directory
  with_items:
    - /opt/cni/bin
    - /etc/cni/net.d

- name: 解压分发{{ kubenetes_version }}
  unarchive:
    src={{ item }}
    dest={{ k8s_src_dir }}/tmp
  with_items:
    - "{{ k8s_src_dir }}/{{ kubenetes_version }}"

- name: 拷贝k8s可执行文件到工作目录
  shell: cd {{ k8s_src_dir }}/tmp/kubernetes/server/bin && \
         cp -rf kube-proxy kubelet {{ k8s_dir }}/bin/  

- name: 部署cni插件
  unarchive: 
    src={{ item }}
    dest=/opt/cni/bin
  with_fileglob:
    - "{{ k8s_src_dir }}/cni-plugins-*.tgz"

- name: 分发k8s节点所需证书
  copy: src=k8s_cert/{{ item }} dest={{ k8s_dir }}/ssl
  with_items:
    - ca.pem
    - kube-proxy.pem
    - kube-proxy-key.pem

- name: 分发k8s配置文件
  template: src={{ item }} dest={{ k8s_dir }}/cfg/{{ item.split('.')[:-1]|join('.') }}
  with_items:
    - bootstrap.kubeconfig.j2
    - kubelet.conf.j2
    - kubelet-config.yml.j2
    - kube-proxy.kubeconfig.j2
    - kube-proxy.conf.j2
    - kube-proxy-config.yml.j2

- name: 分发k8s节点启动文件
  template: src={{ item }} dest=/usr/lib/systemd/system/{{ item.split('.')[:-1]|join('.') }}
  with_items:
    - kubelet.service.j2
    - kube-proxy.service.j2

- name: 启动k8s node组件
  systemd: name={{ item }} state=restarted enabled=yes daemon_reload=yes
  with_items:
    - kubelet
    - kube-proxy

- name: 分发镜像到节点
  tags: load_images
  copy: 
    src={{ item }} 
    dest={{ k8s_src_dir }}/images
  with_fileglob:
    - "{{ k8s_src_dir }}/images/*.tar"

- name: 导入镜像
  tags: load_images
  ignore_errors: yes
  shell: cd {{ k8s_src_dir }}/images && \
         for image in $(ls -1 *.tar);do docker load -i $image; done
